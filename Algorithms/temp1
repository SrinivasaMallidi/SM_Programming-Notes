from django.shortcuts import render, redirect
from django.http import HttpResponse
from .models import Server, DBDetails, PasswordVault
import subprocess

# Create your views here.

def home(request):
    context = {}
    return render(request, 'common/home.html',context)

def viewGWMS(request):
    # Retrieve all Server instances
    servers = Server.objects.all()
    #  Get unique tags and sort them in ascending order
    tags = sorted(set(server.tag for server in servers))

    # Query DBDetails based on the tag
    db_details = DBDetails.objects.filter(tag__in=tags)

    context = {
        'servers': servers, 
        'db_details': db_details,
        'tags': tags
        }

    return render(request, 'common/gwms.html',context)


def passwordvault(request):
    # Retrieve all Server instances
    Passwords = PasswordVault.objects.all()
    
    #  Get unique tags and sort them in ascending order
    tags = sorted(set(i.tag for i in Passwords))

    

    context = {
        'PasswordVault': Passwords, 
        'tags': tags
        }

    return render(request, 'common/PasswordVault.html',context)


def openServer(request):
    if request.method == 'POST':
        action = request.POST.get('action')
        selected_servers = request.POST.getlist('selected_servers')
        if action == 'open_putty':
            for server in selected_servers:
                open_putty_for_server(server)
        elif action == 'open_winscp':
            username = 'Srinivasa.Mallidi-b@sga-res.com'
            print(selected_servers)
            try:
                # Retrieve the PasswordVault object for the given username
                password_entry = PasswordVault.objects.get(username=username)
                password = password_entry.password
                for server in selected_servers:
                    open_putty_for_server(server,username,password)
            except PasswordVault.DoesNotExist:
                print(f"Password not found for username: {username}")
        elif action == 'open_remotedesktop':            
            for server in selected_servers:
                open_remote_desktop_connection(server)
        return redirect('common-view-gwms')
    else:
        return HttpResponse('Invalid request')

def open_remote_desktop_connection(server_address):
    try:
        subprocess.run(['mstsc', '/v', server_address], check=True)
    except subprocess.CalledProcessError as e:
        print(f"Error: {e}")

def open_putty_for_server(hostname):
    print(hostname)
    putty_path = r'C:\Users\SM\Documents\putty.exe'
    username = 'your_username'  # Replace with your PuTTY username
    port = 22  # Replace with your PuTTY port
    putty_command = f'{putty_path} -ssh {username}@{hostname} -P {port}'
    subprocess.Popen(putty_command, shell=True)


def open_winscp_for_server(hostname, username, password):
    winscp_path = r'C:\Program Files (x86)\WinSCP\WinSCP.exe'  # Adjust the path as per your WinSCP installation
    protocol = 'sftp'  # Adjust the protocol as needed
    port = 22  # Adjust the port as needed

    # Construct the command to open WinSCP with the specified parameters
    winscp_command = f'{winscp_path} /command "open {protocol}://{username}:{password}@{hostname}:{port}"'

    # Open WinSCP using subprocess
    subprocess.Popen(winscp_command, shell=True)
