from django.shortcuts import render, redirect
import pandas as pd
from django.http import JsonResponse
from .models import Vulnerability, Proof
from datetime import datetime

# Create your views here.

def home(request):
    vulnerabilities = Vulnerability.objects.all().order_by('VITNUMBER')
    vitnumber_groups = {}
    for vulnerability in vulnerabilities:
        if vulnerability.VITNUMBER not in vitnumber_groups:
            vitnumber_groups[vulnerability.VITNUMBER] = []
        vitnumber_groups[vulnerability.VITNUMBER].append(vulnerability)

    context = {
        'vitnumber_groups': vitnumber_groups
    }
    return render(request, 'vulnerability/home.html',context)


def get_proofs(request):
    print("inside get_proofs")
    if request.method == 'GET' and 'vitnumber' in request.GET:
        vitnumber = request.GET.get('vitnumber')
        print("inside get_proofs VIT"+str(vitnumber))
        proofs = Proof.objects.filter(vulnerability__VITNUMBER=vitnumber)
        proofs_data = [{'proof': proof.PROOF} for proof in proofs]  # Adjust 'proof_field' as per your Proof model
        print("inside get_proofs proofs_data"+str(proofs_data))
        return JsonResponse(proofs_data, safe=False)
    else:
        return JsonResponse({'error': 'Invalid request'}, status=400)

def upload_excelbkp(request):
    if request.method == 'POST':
        excel_file = request.FILES.get('excel_file')
        if excel_file:
            # Read Excel file using pandas
            excel_data = pd.read_excel(excel_file)
            print(excel_data)
            # Pass the data to the template
            return render(request, 'vulnerability/home.html', {'excel_data': excel_data})

    # If no Excel file is uploaded or if request method is not POST,
    # render the template without any data
    return render(request, 'vulnerability/home.html')


def upload_excel(request):
    if request.method == 'POST':
        excel_file = request.FILES.get('excel_file')
        if excel_file:
            # Read Excel file using pandas
            excel_data = pd.read_excel(excel_file)

            for index, row in excel_data.iterrows():
                vitnumber = row['VITNUMBER']
                config_item = row['CONFIGURATION ITEM']
                summary = row['SUMMARY']
                solution = row['SOLUTION']
                severity = row['SEVERITY']
                month_timestamp = row['MONTH']
                state = row['STATE']

                # Convert the timestamp to string format
                month_str = month_timestamp.strftime('%d-%b-%Y')

                try:
                    # Parse the month string into a datetime object
                    month = datetime.strptime(month_str, '%d-%b-%Y').date()
                except ValueError:
                    print(f"Error parsing date string: {month_str}")
                    # Handle the error here (e.g., set default date or skip this row)

                # Check if Vulnerability entry exists
                vulnerability, created = Vulnerability.objects.get_or_create(
                    VITNUMBER=vitnumber,
                    CONFIGURATION_ITEM=config_item,
                    SUMMARY=summary,
                    SOLUTION=solution,
                    SEVERITY=severity,
                    MONTH=month,
                    STATE=state
                )

                # If Proof is provided in the Excel data, create a new Proof entry
                if 'PROOF' in row and not pd.isna(row['PROOF']):
                    proof_text = row['PROOF']
                    proof, _ = Proof.objects.get_or_create(vulnerability=vulnerability, PROOF=proof_text)

            # Pass the data to the template
            #return render(request, 'vulnerability/home.html', {'excel_data': excel_data})            
            return redirect('vulnerability-home')

    # If no Excel file is uploaded or if request method is not POST,
    # render the template without any data
    return redirect('vulnerability-home')
